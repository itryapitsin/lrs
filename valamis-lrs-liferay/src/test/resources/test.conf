h2 {
  baseURL = "jdbc:h2:file:tmp/h2/migrator/db_"
  driver = org.h2.Driver
//  drop = [
//    DROP ALL OBJECTS DELETE FILES
//  ]
}

hsql {
  baseURL = "jdbc:hsqldb:file:tmp/hsql/migrator/db_"
  driver = org.hsqldb.jdbc.JDBCDriver
//  drop = [
//    DROP SCHEMA PUBLIC CASCADE
//  ]
  user = "sa"
  password = ""
}

mysql {
  baseURL = "jdbc:mysql://127.0.0.1:3306"
  driver = org.gjt.mm.mysql.Driver
  user = "root"
  password = ""
  testConn = {
    url = ${baseURL}/${testDB}
    user = ${user}
    password = ${password}
    driver = ${driver}
  }
}

postgres {
  baseURL = "jdbc:postgresql://127.0.0.1:5432"
  driver = org.postgresql.Driver
  user = "postgres"
  password = "postgres"
  testConn = {
    url = ${baseURL}/${testDB}
    user = ${user}
    password = ${password}
    driver = ${driver}
  }
}

//oracle {
//  baseURL = "jdbc:oracle:thin:@test-oracle:1521:xe"
//  driver = oracle.jdbc.OracleDriver
//  testConn {
//    url = ${baseURL}
//    user = DIALECT_TESTER
//    password = DIALECT_TESTER
//  }
//  adminConn {
//    url = ${baseURL}
//    user = SYSTEM
//    password = arcusys
//  }
//  create = [
//    create tablespace ${testConn.user}"_TS datafile '/u01/app/oracle/oradata/XE/"${testConn.user}_${testDB}"_TS' size 2M autoextend on"
//    create user ${testConn.user}" identified by \""${testConn.password}"\" default tablespace "${testConn.user}_TS
//    "grant connect, resource, select any dictionary, select_catalog_role, create any view, analyze any, analyze any dictionary to "${testConn.user}
//  ]
//  # These tables are supposted to exist right from the begining to perform tests like rename table, drop table etc.
//  postCreate = [
//  ]
//  drop = [
//    "begin execute immediate 'drop user "${testConn.user}" cascade'; exception when others then if sqlcode != -1918 then raise; end if; end;"
//    "begin execute immediate 'drop tablespace "${testConn.user}"_TS including contents and datafiles cascade constraints'; exception when others then if sqlcode != -959 then raise; end if; end;"
//  ]
//}

//sqlserver {
//  baseURL = "jdbc:sqlserver://test-sqlserver;database="
//  urlSuffix = ";applicationName=Slick_Migration"
//  testConn.url = ${baseURL}${testDB}${urlSuffix}
//  adminConn.url = ${baseURL}${adminDB}${urlSuffix}
//  user = sa
//  password = QAZ123wsx
//  adminDB = master
//  defaultSchema = dbo
//  create = "CREATE DATABASE \""${testDB}"\" ON (NAME = '[DB]_dat', FILENAME = 'C:\\\\temp\\\\"${testDB}".mdf') LOG ON (NAME = '"${testDB}"_log', FILENAME = \"C:\\\\temp\\\\"${testDB}".ldf\")"
//  drop = "IF EXISTS(SELECT name FROM sys.databases WHERE name = '"${testDB}"') DROP DATABASE \""${testDB}"\""
//  driver = com.microsoft.sqlserver.jdbc.SQLServerDriver
//}

//db2 {
//  testDB = DIALECT
//  schema = DIALECT_TEST
//  baseURL = "jdbc:db2://localhost:50000/"${testDB}":currentSchema="${schema}";"
//  testConn.url = ${baseURL}
//  adminConn.url = ${baseURL}
//  user = db2inst1
//  password = db2inst1
//  driver = "com.ibm.db2.jcc.DB2Driver"
//}


# Should be left untouched since it is a fallback values in case of some db' configuration is missing
defaults {
  baseURL = ""
  driver = null
  user = null
  password = null
  testDB = lrs_test
  adminDB = ""
  # Test database settings for Database.forConfig
  testConn = {
    url = ${baseURL}${testDB}
    user = ${user}
    password = ${password}
    driver = ${driver}
  }
  # Admin database settings for Database.forConfig
  adminConn = {
    url = ${baseURL}${adminDB}
    user = ${user}
    password = ${password}
    driver = ${driver}
  }
}

zookeeper {
  tickTime = 2000
  dataDir  = /tmp/embedded-zookeeper
  clientPort = 9091

}

kafka {
  zookeeper {
    connect = localhost${zookeper.clientPort}
  }
  hostname = localhost
  port = 9090
  broker {
    id = 1
  }
  log {
    dir = /tmp/embedded-kafka/
  }
}